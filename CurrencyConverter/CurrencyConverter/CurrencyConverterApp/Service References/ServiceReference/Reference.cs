//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.1008
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurrencyConverterApp.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyValues", Namespace="http://schemas.datacontract.org/2004/07/CurrencyConverter")]
    [System.SerializableAttribute()]
    public partial class MyValues : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] CurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Currency {
            get {
                return this.CurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyField, value) != true)) {
                    this.CurrencyField = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Errors {
            get {
                return this.ErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorsField, value) != true)) {
                    this.ErrorsField = value;
                    this.RaisePropertyChanged("Errors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Rate {
            get {
                return this.RateField;
            }
            set {
                if ((object.ReferenceEquals(this.RateField, value) != true)) {
                    this.RateField = value;
                    this.RaisePropertyChanged("Rate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyValues_Convert", Namespace="http://schemas.datacontract.org/2004/07/CurrencyConverter")]
    [System.SerializableAttribute()]
    public partial class MyValues_Convert : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string errorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string rateAField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string rateBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string resultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string errors {
            get {
                return this.errorsField;
            }
            set {
                if ((object.ReferenceEquals(this.errorsField, value) != true)) {
                    this.errorsField = value;
                    this.RaisePropertyChanged("errors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string rateA {
            get {
                return this.rateAField;
            }
            set {
                if ((object.ReferenceEquals(this.rateAField, value) != true)) {
                    this.rateAField = value;
                    this.RaisePropertyChanged("rateA");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string rateB {
            get {
                return this.rateBField;
            }
            set {
                if ((object.ReferenceEquals(this.rateBField, value) != true)) {
                    this.rateBField = value;
                    this.RaisePropertyChanged("rateB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string result {
            get {
                return this.resultField;
            }
            set {
                if ((object.ReferenceEquals(this.resultField, value) != true)) {
                    this.resultField = value;
                    this.RaisePropertyChanged("result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.CurConvIService")]
    public interface CurConvIService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CurConvIService/GetData", ReplyAction="http://tempuri.org/CurConvIService/GetDataResponse")]
        CurrencyConverterApp.ServiceReference.MyValues GetData(string currency, string startdate, string enddate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CurConvIService/Convert", ReplyAction="http://tempuri.org/CurConvIService/ConvertResponse")]
        CurrencyConverterApp.ServiceReference.MyValues_Convert Convert(string currencyA, string currencyB, string date, string SumXinA);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CurConvIServiceChannel : CurrencyConverterApp.ServiceReference.CurConvIService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurConvIServiceClient : System.ServiceModel.ClientBase<CurrencyConverterApp.ServiceReference.CurConvIService>, CurrencyConverterApp.ServiceReference.CurConvIService {
        
        public CurConvIServiceClient() {
        }
        
        public CurConvIServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurConvIServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurConvIServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurConvIServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CurrencyConverterApp.ServiceReference.MyValues GetData(string currency, string startdate, string enddate) {
            return base.Channel.GetData(currency, startdate, enddate);
        }
        
        public CurrencyConverterApp.ServiceReference.MyValues_Convert Convert(string currencyA, string currencyB, string date, string SumXinA) {
            return base.Channel.Convert(currencyA, currencyB, date, SumXinA);
        }
    }
}
